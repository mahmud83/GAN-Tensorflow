import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("./mnist/data/", one_hot=True)

# Hyper parameter
total_epoch = 100
batch_size = 100
n_hidden = 256
n_input = 28 * 28
n_noise = 128
n_class = 10

# neural network model
X = tf.placeholder(tf.float32, [None, n_input])
# It is used to add information about the noise and the actual image to the corresponding number.
Y = tf.placeholder(tf.float32, [None, n_class])
Z = tf.placeholder(tf.float32, [None, n_noise])

def generator(noise, labels) :
    with tf.variable_scope('generator') :
        # Adding labels to the noise value
        inputs = tf.concat([noise, labels], axis = 1)

        hidden = tf.layers.dense(inputs=inputs, units=n_hidden, activation=tf.nn.relu)
        output = tf.layers.dense(inputs=hidden, units=n_input, activation=tf.nn.sigmoid)


        return output

def discriminator(inputs, labels, reuse=None) :
    with tf.variable_scope('discriminator') as scope :
        # In order to make the parameters of the model that discriminates the actual image from the image generated by the noise the same,
        # Allows reuse of previously used variables.
        if reuse :
            scope.reuse_variables()

        inputs = tf.concat([inputs, labels], axis = 1)

        hidden = tf.layers.dense(inputs=inputs, units=n_hidden, activation=tf.nn.relu)

        output = tf.layers.dense(inputs=hidden, units=1, activation=None)

    return output